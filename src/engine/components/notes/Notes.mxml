<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 
		 width="100%"
		 minHeight="300"

		 xmlns:components="engine.components.*">
	
	<fx:Declarations>
		<s:HTTPService id="setHttpService"
					   method="POST"
					   url="{Core.serverUrl + (Core.yii ? '/?r=' : '/') + (parentDocument.setHttpServiceModule.length > 0 ? parentDocument.setHttpServiceModule : Core.setHttpServiceModule) + '/notes/deletecompletely'}"
					   requestTimeout="{Core.requestTimeout}"
					   result="setHttpService_resultHandler(event)"
					   fault="Core.httpService_faultHandler(event)"
					   resultFormat="e4x"
					   concurrency="last"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.core.ScrollPolicy;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.collections.SortField;
			
			import engine.components.Window;
			import engine.core.Core;
			import engine.storages.DataStorage;
			
			[Bindable]
			public var data:Object;
			
			[Bindable]
			private var dataStorage:DataStorage = new DataStorage();
			
			[Bindable]
			public var accountsDataStorageName:String = 'adminsAccounts';
			
			public var moduleId:Number;
			
			public function addFunction():void
			{
				var window:Window = Core.launcher.launch('EditNoteWindow', null, parentDocument as Window, ['adding']);
				window.changeValue('module_id', moduleId, true, false, false);
				window.changeValue('parent_id', data['@item_id'], true, false, false);
				window.changeValue('note', '', true, false, true);
			}
			
			public function editFunction():void
			{
				Core.launcher.launch('EditNoteWindow', ObjectUtil.clone(dataGridSet.dataGrid.selectedItem), parentDocument as Window, ['editing']);
			}
			
			public function copyFunction():void
			{
				var window:Window = Core.launcher.launch('EditNoteWindow', null, parentDocument as Window, ['adding', 'copying']);
				
				var selectedItem:Object = ObjectUtil.clone(dataGridSet.dataGrid.selectedItem);
				selectedItem.@item_id = null;
				window.injectData(selectedItem);
			}
			
			public function deleteFunction():void
			{
				var window:Window = Core.launcher.launch('ConfirmWindow');
				window.parentWindow = parentDocument as Window;
				
				window['onYesFunction'] = function():void
				{
					var requestParams:Object = new Object();
					
					var array:Array = new Array();
					for (var i:int = 0; i < dataGridSet.dataGrid.selectedItems.length; i++)
					{
						array.push(dataGridSet.dataGrid.selectedItems[i].@item_id);
					}
					
					requestParams.item_id = array.toString();
					setHttpService.send(requestParams);
					
					Core.removeWindow(window);
				};
			}
			
			public function reloadFunction():void
			{
				if (Boolean(data))
				{
					var requestParams:Object = new Object();
					requestParams.module_id = moduleId;
					requestParams.parent_id = data['@item_id'];
					
					dataStorage.getHttpServiceController = 'notes';
					dataStorage.onChangeFunction = dataStorageOnChangeFunction;
					dataStorage.refresh(requestParams);
				}
			}
			
			private function dataStorageOnChangeFunction():void
			{
				for (var i:int = 0; i < dataGridSet.dataGrid.dataProvider.length; i++) 
				{
					dataGridSet.dataGrid.dataProvider[i].@creation_date = dataGridSet.dataGrid.dataProvider[i].@creation_date + '\n' + Core.getItemValue(Core.data[accountsDataStorageName].dataProvider, '@item_id', dataGridSet.dataGrid.dataProvider[i].@account_id, '@email');
				}
			}
			
			public function clear():void
			{
				dataStorage.dataProvider = null;
			}
			
			protected function setHttpService_resultHandler(event:ResultEvent):void
			{
				clear();
				reloadFunction();
			}
		]]>
	</fx:Script>
	
	<components:DataGridSet id="dataGridSet"
							width="100%"
							height="100%"
							
							rowCount="1"
							
							sortFields="{[new SortField('@item_id', true, true)]}"
							
							dataProvider="{dataStorage.dataProvider}"
							selectionMode="multipleRows"
							horizontalScrollPolicy="{ScrollPolicy.AUTO}"
							controlPanelEnabled="{parentDocument.numChildrenWindows == 0 &amp;&amp; Core.getItem(data, '@item_id') > 0}"
							
							addFunction="{addFunction}"
							editFunction="{editFunction}"
							copyFunction="{copyFunction}"
							reloadFunction="{reloadFunction}"
							deleteFunction="{deleteFunction}">
		
		<components:columns>
			<mx:AdvancedDataGridColumn width="130" headerText="{Core.translate.to(['date'])}" dataField="@creation_date"/>
			<mx:AdvancedDataGridColumn headerText="{Core.translate.to(['note'])}" dataField="@note"/>
		</components:columns>
	</components:DataGridSet>
</s:Group>
