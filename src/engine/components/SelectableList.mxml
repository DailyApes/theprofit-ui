<?xml version="1.0" encoding="utf-8"?>
<components:FieldSet xmlns:fx="http://ns.adobe.com/mxml/2009" 
					 xmlns:s="library://ns.adobe.com/flex/spark" 
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 collapsible="true"
					 xmlns:components="engine.components.*"
					 xmlns:extended="engine.extended.*">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			
			import engine.core.Core;
			
			private var _dataProvider:ArrayCollection;
			
			[Bindable]
			public var matter:String = '';
			
			[Bindable]
			public var column:String;
			
			[Bindable]
			public var labelField:String = '@name';

			[Bindable]
			public var requestedColumnCount:Number = 1;
			
			[Bindable]
			public var radioButtonsEnabled:Boolean;
			
			[Bindable]
			public var sortEnabled:Boolean = true;
			[Bindable]
			public var sortFields:Array;
			
			[Bindable]
			[Inspectable(category="General", enumeration="rows,columns", defaultValue="rows")]
			public var orientation:String;
			
			[Bindable]
			public function set dataProvider(value:ArrayCollection):void
			{
				var listDataProvider:ArrayCollection = dataProvider;
				
				var filterFunction:Function;
				
				if (dataProvider && Boolean(dataProvider.filterFunction))
				{
					filterFunction = dataProvider.filterFunction;
				}
				
				_dataProvider = value;

				
				Core.translate.columns(dataProvider, labelField);
				
				if (sortEnabled)
				{
					var sort:Sort = new Sort();
					sort.fields = sortFields ? sortFields : [new SortField(labelField)];
					dataProvider.sort = sort;					
				}
				
				dataProvider.filterFunction = filterFunction;
				dataProvider.refresh();
				
				for (var i:int = 0; i < dataProvider.source.length; i++) 
				{
					for (var j:int = 0; j < listDataProvider.source.length; j++) 
					{
						if (dataProvider.source[i]['@item_id'] == listDataProvider.source[j]['@item_id'])
						{
							dataProvider.source[i].selected = listDataProvider.source[j].selected;
						}
					}
				}
			}
		
			public function get dataProvider():ArrayCollection
			{
				return _dataProvider;
			}
			
			public function filterListBySource(source:Object):void
			{
				if (dataProvider)
				{
					dataProvider.filterFunction = listFilterFunction;
					dataProvider.refresh();
					
					function listFilterFunction(item:Object):Boolean
					{
						if (source.length() > 0)
						{
							for (var i:int = 0; i < source.length(); i++) 
							{
								if (source[i][column] == item['@item_id'] || item.selected)
								{
									return true;
								}
							}	
						}
						else if (item.selected)
						{
							return true;
						}
						
						return false;
					}					
				}
			}
			
			protected function list_clickHandler(event:MouseEvent):void
			{
				var countSelectedItems:Number = 0;
				
				if (dataProvider.source)
				{
					for (var i:int = 0; i < dataProvider.source.length; i++)
					{
						if (dataProvider.source[i].selected == true)
						{
							++countSelectedItems;
						}
					}
					
					//if (countSelectedItems == 0 || countSelectedItems == dataProvider.source.length)
					if (countSelectedItems == 0)
					{
						allMatterRadioButton.selected = true;
					}
					else
					{
						allMatterRadioButton.selected = false;
					}
					
					dispatchEvent(new Event('change'));
				}
			}
			
			protected function allMatterRadioButton_changeHandler(event:Event):void
			{
				if (allMatterRadioButton.selected)
				{
					for (var i:int = 0; i < dataProvider.source.length; i++) 
					{
						dataProvider.source[i].selected = false;
					}
					
					dataProvider.refresh();
				}
				
				dispatchEvent(new Event('change'));
			}
			
			public function filterFunction(item:Object):Boolean
			{
				var result:Boolean;
				
				if (allMatterRadioButton.selected)
				{
					return true;
				}
				else
				{
					if (orRadioButton.selected)
					{
						for (var i:int = 0; i < dataProvider.source.length; i++)
						{
							if (dataProvider.source[i].selected == true)
							{
								result = String(dataProvider.source[i]['@item_id']).toLowerCase() == String(item[column]).toLowerCase();
							}
							
							if (result)
							{
								return true;
							}
						}
					}
					else
					{
						for (i = 0; i < dataProvider.source.length; i++) 
						{
							if (dataProvider.source[i].selected !== true)
							{
								result = String(dataProvider.source[i]['@item_id']).toLowerCase() == String(item[column]).toLowerCase();
							}
							
							if (result)
							{
								return true;
							}
						}
					}
				}
				
				return false;
			}
			
			public function clear():void
			{
				allMatterRadioButton.selected = true;
				allMatterRadioButton_changeHandler(null);
				
				orRadioButton.selected = true;
			}
			
			protected function orRadioButton_changeHandler(event:Event):void
			{
				callLater(dispatchEvent, [new Event('change')]);
			}
			
			protected function notRadioButton_changeHandler(event:Event):void
			{
				callLater(dispatchEvent, [new Event('change')]);
			}
		]]>
	</fx:Script>
	
	<components:content>
		<!--<extended:List id="list" width="100%" height="100%" minHeight="0" left="5" right="5" top="5" bottom="5" contentBackgroundAlpha="0" borderVisible="false" labelField="name" dataProvider="{dataProvider}" horizontalScrollPolicy="off" itemRenderer="engine.itemrenderrers.CheckBoxListItemRenderer" click="list_clickHandler(event)">
			<extended:layout>
				<s:TileLayout orientation="{orientation}" columnAlign="justifyUsingGap" verticalGap="0" requestedColumnCount="{requestedColumnCount}"/>
			</extended:layout>
		</extended:List>-->
		
		<s:VGroup width="100%" height="100%" gap="-1">
			<extended:List id="list" width="100%" height="100%" minHeight="0" contentBackgroundAlpha="0" borderVisible="false" labelField="{labelField}" dataProvider="{dataProvider}" horizontalScrollPolicy="off" itemRenderer="engine.itemrenderrers.CheckBoxListItemRenderer" click="list_clickHandler(event)">
				<extended:layout>
					<s:TileLayout orientation="{orientation}" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" columnAlign="justifyUsingGap" verticalGap="0" requestedColumnCount="{requestedColumnCount}"/>
				</extended:layout>
			</extended:List>
			
			<s:VGroup width="100%" visible="{radioButtonsEnabled &amp;&amp; dataProvider.length > 1}" includeInLayout="{radioButtonsEnabled &amp;&amp; dataProvider.length > 1}" gap="0" horizontalAlign="center">
				<components:HSplitter/>
				
				<s:HGroup paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" gap="5">
					<s:RadioButton id="orRadioButton" groupName="radioButtonGroup" selected="true" label="{Core.translate.to(['or'])}" change="orRadioButton_changeHandler(event)"/>
					<s:RadioButton id="notRadioButton" groupName="radioButtonGroup" label="{Core.translate.to(['not'])}" change="notRadioButton_changeHandler(event)"/>
				</s:HGroup>
			</s:VGroup>  
		</s:VGroup>
		
	</components:content>
	
	<components:addon>
		<s:RadioButton id="allMatterRadioButton" fontWeight="bold" selected="true" color="{Core.darkBlue}" label="{Core.translate.to(['alls', matter])}" change="allMatterRadioButton_changeHandler(event)"/>
	</components:addon>
	
</components:FieldSet>