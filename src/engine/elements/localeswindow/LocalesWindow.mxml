<?xml version="1.0" encoding="utf-8"?>
<components:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   
				   minimizable="true"
				   maximizable="true"
				   maximized="false"
				   
				   label="locales"
				   icon="globe"
				   
				   width="{Math.round(Core.application.width / 1.10)}"
				   height="{Math.round(Core.application.height / 1.25)}"
				   
				   menu="{new ArrayCollection()}"
				   
				   noOnKeyDown="false"
				   yesOnKeyDown="false"
				   
				   yesButtonEnabled="{!inProgress}"
				   yesButtonIcon="save"
				   yesButtonTooltip="save"
				   yesButtonLabel="save"
				   
				   autoreloadEnabled="true"
				   
				   getHttpServiceController="locales"
				   
				   setHttpServiceController="locales"
				   setHttpServiceAction="deletecompletely"
				   
				   focusTarget="{dataGridSet}"
				   
				   autoreloadrRun="{numChildrenWindows == 0}"
				   
				   xmlns:components="engine.components.*"
				   xmlns:window="engine.components.window.*">
	
	<!--dataStorage="{Core.data.locales}"-->
	
	<fx:Declarations>
		<s:HTTPService id="saveHttpService"
					   method="POST"
					   url="{Core.serverUrl + (Core.yii ? '/?r=' : '/') + (getHttpServiceModule.length > 0 ? getHttpServiceModule : Core.getHttpServiceModule) + '/locales/savetoxml'}"
					   requestTimeout="{Core.requestTimeout}"
					   invoke="saveHttpService_invokeHandler(event)"
					   result="saveHttpService_resultHandler(event)"
					   fault="Core.httpService_faultHandler(event); saveHttpService_faultHandler(event)"
					   resultFormat="e4x"
					   concurrency="last"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.InvokeEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import engine.components.Window;
			import engine.core.Core;
			
			public function addFunction():void
			{
				Core.launcher.launch('LocalesEditWindow', null, this, ['adding']);
			}
			
			public function editFunction():void
			{
				Core.launcher.launch('LocalesEditWindow', dataGridSet.dataGrid.selectedItem, this, ['editing']);
			}
			
			public function copyFunction():void
			{
				var selectedItem:Object = ObjectUtil.clone(dataGridSet.dataGrid.selectedItem);
				selectedItem.@item_id = null;
				var window:Window = Core.launcher.launch('LocalesEditWindow', selectedItem, this, ['adding']);
			}
			
			public function deleteFunction():void
			{
				var window:Window = Core.launcher.launch('ConfirmWindow');
				window.parentWindow = this;
				
				window['onYesFunction'] = function():void
				{
					requestParams = new Object();
					
					var array:Array = new Array();
					for (var i:int = 0; i < dataGridSet.dataGrid.selectedItems.length; i++)
					{
						array.push(dataGridSet.dataGrid.selectedItems[i].@item_id);
					}
					
					requestParams.item_id = array.toString();
					setHttpService.send(requestParams);
					
					Core.removeWindow(window);
				};
			}
			
			override public function dataStorage_changeFunction():void
			{
				for (var i:int = 0; i < dataGridSet.dataProvider.length(); i++) 
				{
					if (!Core.checkUnique(dataGridSet.dataProvider, '@ru_RU', dataGridSet.dataProvider[i].@ru_RU, i))
					{
						dataGridSet.dataProvider[i].@paint2 = Core.red;
					}
					
					if (!Core.checkUnique(dataGridSet.dataProvider, '@ua_UA', dataGridSet.dataProvider[i].@ua_UA, i))
					{
						dataGridSet.dataProvider[i].@paint3 = Core.red;
					}
					
					if (!Core.checkUnique(dataGridSet.dataProvider, '@en_US', dataGridSet.dataProvider[i].@en_US, i))
					{
						dataGridSet.dataProvider[i].@paint4 = Core.red;
					}
				}
			}
			
			override public function setHttpService_resultFunction():void
			{
				requestParams = new Object();
				reloadFunction();
			}
			
			protected function saveHttpService_invokeHandler(event:InvokeEvent):void
			{
				inProgress = true;
			}
			
			protected function saveHttpService_resultHandler(event:ResultEvent):void
			{
				inProgress = false;
			}
			
			protected function saveHttpService_faultHandler(event:FaultEvent):void
			{
				inProgress = false;
			}
			
			override public function yesFunction():void
			{
				saveHttpService.send();
			}
		]]>
	</fx:Script>
	
	<components:content>
		<s:Group>
			<components:DataGridSet id="dataGridSet"
									left="5" right="5" top="5" bottom="5"
									width="100%"
									height="100%"
									dataProvider="{getHttpService.lastResult.item}"
									selectionMode="multipleRows"
									controlPanelEnabled="{numChildrenWindows == 0}"
									
									addFunction="{addFunction}"
									editFunction="{editFunction}"
									copyFunction="{copyFunction}"
									reloadFunction="{reloadFunction}"
									deleteFunction="{deleteFunction}">
				<components:columns>
					<mx:AdvancedDataGridColumn width="50" headerText="{Core.translate.to(['id'])}" dataField="@item_id"/>
					<mx:AdvancedDataGridColumn width="200" headerText="{Core.translate.to(['locale'])}" dataField="@locale"/>
					<mx:AdvancedDataGridColumn width="200" headerText="{Core.translate.to(['ru_RU'])}" dataField="@ru_RU" itemRenderer="engine.itemrenderrers.PaintAdvancedDataGridItemRenderer"/>
					<mx:AdvancedDataGridColumn width="200" headerText="{Core.translate.to(['ua_UA'])}" dataField="@ua_UA" itemRenderer="engine.itemrenderrers.PaintAdvancedDataGridItemRenderer"/>
					<mx:AdvancedDataGridColumn width="200" headerText="{Core.translate.to(['en_US'])}" dataField="@en_US" itemRenderer="engine.itemrenderrers.PaintAdvancedDataGridItemRenderer"/>
				</components:columns>
			</components:DataGridSet>
			
		</s:Group>
	</components:content>
	
</components:Window>
