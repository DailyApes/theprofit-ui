<?xml version="1.0" encoding="utf-8"?>
<components:Window xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:components="engine.components.*"
				   mouseDownOutside="mouseDownOutsideHandler(event)"
				   label="start"
				   resizable="false"
				   centered="false"
				   closable="false"
				   minimizable="true"
				   dragable="false"
				   createViewportButton="false"
				   
				   checkForOnline="false"
				   
				   setHttpServiceController="identification"
				   setHttpServiceAction="logout"
				   
				   windowsStackEnabled="false"
				   focusTarget="{textInput}"
				   
				   maxHeight="{Core.application.height - Core.application.viewport.taskbarGroup.height}"
				   height="{500 * Core.size &#60; Core.application.height - Core.application.viewport.taskbarGroup.height ? 500 * Core.size : Core.application.height - Core.application.viewport.taskbarGroup.height}"
				   y = "{Core.application.height - height - Core.application.viewport.taskbarGroup.height + 1}"
				   
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:extended="engine.extended.*"
				   xmlns:window="engine.components.window.*">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexMouseEvent;
			import mx.events.ListEvent;
			
			import engine.components.HSplitter;
			import engine.core.Core;
			import engine.elements.startwindow.components.StartWindowButton;
			
			override public function init():void
			{
				super.init();
				
				Core.menus.refresh();
				createButtons();
			}
			
			private function createButtons():void
			{
				itemsGroup.removeAllElements();
				var item:*;
				
				for (var i:int = 0; i < Core.application.startWindowItemsArray.length; i++) 
				{
					switch(Core.application.startWindowItemsArray[i].type)
					{
						case 'Button':
						{
							item = new StartWindowButton();
							item.label = Core.application.startWindowItemsArray[i].label;
							item.icon = Core.application.startWindowItemsArray[i].icon;
							item.action = Core.application.startWindowItemsArray[i].action;
							break;
						}
							
						case 'HSplitter':
						{
							item = new HSplitter();
							break;
						}
							
						default:
						{
							break;
						}
					}
					
					itemsGroup.addElement(item);
				}
			}
			
			protected function mouseDownOutsideHandler(event:FlexMouseEvent):void
			{
				try
				{
					if (event.relatedObject['id'] !== 'startButton')
					{
						minimized = true;
					}
				} 
				catch(error:Error) 
				{
					minimized = true;
				}
			}
			
			protected function tree_itemClickHandler(event:ListEvent):void
			{
				if (tree.selectedItem.action)
				{
					minimized = true;
					Core.launcher.launch(tree.selectedItem.action);
				}
				else
				{
					Core.tree_itemClickHandler(event);
				}
			}
			
			public function exitButton_clickHandler(event:MouseEvent):void
			{
				if (Core.identified)
				{
					minimized = true;
					
					if (event)
					{
						Core.launcher.launch('ConfirmWindow')['onYesFunction'] = function():void
						{
							setHttpService.send();
						};						
					}
					else
					{
						setHttpService.send();
					}
				}
			}
			override public function setHttpService_resultFunction():void
			{
				Core.sessionTimer.stop();
				
				Core.clearAllEvents();
				
				Core.removeAllWindows();
				Core.windowsÐ¡ache = new Array();
				Core.identified = false;
				Core.launcher.launch('IdentificationWindow');
			}
			
			private function refreshData():void
			{
				Core.menus.startWindowMenu = new ArrayCollection(Core.menus.startWindowMenu.source);
				
				for (var i:int=0; i < Core.menus.startWindowMenu.length; i++)
				{
					Core.menus.startWindowMenu[i].children = new ArrayCollection(Core.menus.startWindowMenu[i].children.source);
					refreshRecursiveChildren(Core.menus.startWindowMenu.source[i]);
				}
				
				tree.invalidateList();
				
				Core.menus.startWindowMenu.filterFunction=filterData;
				Core.menus.startWindowMenu.refresh();
			}
			
			private function refreshRecursiveChildren(item:Object):void
			{
				if(item.children)
				{
					for each(var _item:Object in item.children.source)
					{
						refreshRecursiveChildren(_item);
					}
					
					item.children =	new ArrayCollection(item.children.source);
					item.children.filterFunction = filterData;
					item.children.refresh();
				}
			}
			
			public function filterData(item:Object):Boolean
			{
				var searchString:String = textInput.text;
				
				if(searchString.length == 0 || item.label.toLowerCase().indexOf(searchString.toLowerCase()) >= 0)
				{
					return true;
				}	
				else if(item.children != null && item.children.length > 0)
				{	
					return true;
				}
				
				return false;
			}
			
			protected function refillButton_clickHandler(event:MouseEvent):void
			{
				minimized = true;
				Core.launcher.launch('RefillBalanceWindow');
			}
			
		]]>
	</fx:Script>
	
	
	<components:content>
		<s:HGroup height="100%" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5" gap="5">
			
			<s:VGroup width="250" height="100%" gap="5">
				<mx:Tree id="tree" width="100%" height="100%" borderColor="{Core.black}" labelField="label" dataProvider="{Core.menus.startWindowMenu}" itemClick="tree_itemClickHandler(event)"/>
				<extended:TextInput id="textInput" width="100%" height="{Core.size * Core.sizeMultiplier + 4}" creationComplete="{event.target.setFocus()}" change="{refreshData()}"/>
			</s:VGroup>
			
			<s:VGroup height="100%" minWidth="100" gap="5">
				<s:VGroup id="itemsGroup" width="100%" gap="5">
					
				</s:VGroup>
				
				<s:Spacer height="100%"/>
				<!--<components:Button id="refillButton" width="100%" visible="{Core.api}" includeInLayout="{Core.api}" label="{Core.translate.to(['refill balance'])}" paddingWidth="5" icon="money" backgroundAlpha="{selected ? 1 : 0}" labelColor="{Core.white}" color="{Core.blue}" overColor="{Core.lightBlue}" downColor="{Core.darkBlue}" defaultIconColor="{selected ? 'white' : 'gray'}" click="refillButton_clickHandler(event)"/>-->
				<components:Button id="exitButton" width="100%" visible="{!Core.api}" includeInLayout="{!Core.api}" label="exit" paddingWidth="5" icon="key" backgroundAlpha="{selected ? 1 : 0}" labelColor="{Core.white}" color="{Core.red}" overColor="{Core.lightRed}" downColor="{Core.darkRed}" defaultIconColor="{selected ? 'white' : 'gray'}" click="exitButton_clickHandler(event)"/>
			</s:VGroup>
		</s:HGroup>
	</components:content>
</components:Window>
